// Code generated by github.com/dashotv/golem. DO NOT EDIT.
import { Email, Response, Setting, imlfwClient } from '.';

export interface EmailIndexRequest {
  page: number;
  limit: number;
}
export interface EmailIndexResponse extends Response {
  result: Email[];
  total: number;
}
export const EmailIndex = async (params: EmailIndexRequest) => {
  const response = await imlfwClient.get(`/email/?page=${params.page}&limit=${params.limit}`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EmailIndexResponse;
};

export interface EmailCreateRequest {
  subject: Email;
}
export interface EmailCreateResponse extends Response {
  result: Email;
}
export const EmailCreate = async (params: EmailCreateRequest) => {
  const response = await imlfwClient.post(`/email/?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EmailCreateResponse;
};

export interface EmailShowRequest {
  id: string;
}
export interface EmailShowResponse extends Response {
  result: Email;
}
export const EmailShow = async (params: EmailShowRequest) => {
  const response = await imlfwClient.get(`/email/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EmailShowResponse;
};

export interface EmailUpdateRequest {
  id: string;
  subject: Email;
}
export interface EmailUpdateResponse extends Response {
  result: Email;
}
export const EmailUpdate = async (params: EmailUpdateRequest) => {
  const response = await imlfwClient.put(`/email/${params.id}?`, params.subject);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EmailUpdateResponse;
};

export interface EmailSettingsRequest {
  id: string;
  setting: Setting;
}
export interface EmailSettingsResponse extends Response {
  result: Email;
}
export const EmailSettings = async (params: EmailSettingsRequest) => {
  const response = await imlfwClient.patch(`/email/${params.id}?`, params.setting);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EmailSettingsResponse;
};

export interface EmailDeleteRequest {
  id: string;
}
export interface EmailDeleteResponse extends Response {
  result: Email;
}
export const EmailDelete = async (params: EmailDeleteRequest) => {
  const response = await imlfwClient.delete(`/email/${params.id}?`);

  if (!response.data) {
    throw new Error('response empty?');
  }

  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error('unknown error');
  }

  return response.data as EmailDeleteResponse;
};
