// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"context"
	"fmt"
	"net/http"

	"github.com/dashotv/fae"
	"github.com/dashotv/golem/plugins/router"
	"github.com/labstack/echo/v4"
)

func init() {
	initializers = append(initializers, setupRoutes)
	healthchecks["routes"] = checkRoutes
	starters = append(starters, startRoutes)
}

func checkRoutes(app *Application) error {
	// TODO: check routes
	return nil
}

func startRoutes(ctx context.Context, app *Application) error {
	go func() {
		app.Routes()
		app.Log.Info("starting routes...")
		if err := app.Engine.Start(fmt.Sprintf(":%d", app.Config.Port)); err != nil {
			app.Log.Errorf("routes: %s", err)
		}
	}()
	return nil
}

func setupRoutes(app *Application) error {
	logger := app.Log.Named("routes").Desugar()
	e, err := router.New(logger)
	if err != nil {
		return fae.Wrap(err, "router plugin")
	}
	app.Engine = e
	// unauthenticated routes
	app.Default = app.Engine.Group("")
	// authenticated routes (if enabled, otherwise same as default)
	app.Router = app.Engine.Group("")

	// TODO: fix auth
	if app.Config.Auth {
		clerkSecret := app.Config.ClerkSecretKey
		if clerkSecret == "" {
			app.Log.Fatal("CLERK_SECRET_KEY is not set")
		}
		clerkToken := app.Config.ClerkToken
		if clerkToken == "" {
			app.Log.Fatal("CLERK_TOKEN is not set")
		}

		app.Router.Use(router.ClerkAuth(clerkSecret, clerkToken))
	}

	return nil
}

type Setting struct {
	Name  string `json:"name"`
	Value bool   `json:"value"`
}

type SettingsBatch struct {
	IDs   []string `json:"ids"`
	Name  string   `json:"name"`
	Value bool     `json:"value"`
}

type Response struct {
	Error   bool        `json:"error"`
	Message string      `json:"message,omitempty"`
	Result  interface{} `json:"result,omitempty"`
	Total   int64       `json:"total,omitempty"`
}

func (a *Application) Routes() {
	a.Default.GET("/", a.indexHandler)
	a.Default.GET("/health", a.healthHandler)

	email := a.Router.Group("/email")
	email.GET("/", a.EmailIndexHandler)
	email.POST("/", a.EmailCreateHandler)
	email.GET("/:id", a.EmailShowHandler)
	email.PUT("/:id", a.EmailUpdateHandler)
	email.PATCH("/:id", a.EmailSettingsHandler)
	email.DELETE("/:id", a.EmailDeleteHandler)

	hooks := a.Router.Group("/hooks")
	hooks.POST("/zapier", a.HooksZapierHandler)

}

func (a *Application) indexHandler(c echo.Context) error {
	return c.JSON(http.StatusOK, router.H{
		"name": "imlfw",
		"routes": router.H{
			"email": "/email",
			"hooks": "/hooks",
		},
	})
}

func (a *Application) healthHandler(c echo.Context) error {
	health, err := a.Health()
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, router.H{"name": "imlfw", "health": health})
}

// Email (/email)
func (a *Application) EmailIndexHandler(c echo.Context) error {
	page := router.QueryParamIntDefault(c, "page", "1")
	limit := router.QueryParamIntDefault(c, "limit", "25")
	return a.EmailIndex(c, page, limit)
}
func (a *Application) EmailCreateHandler(c echo.Context) error {
	subject := &Email{}
	if err := c.Bind(subject); err != nil {
		return err
	}
	return a.EmailCreate(c, subject)
}
func (a *Application) EmailShowHandler(c echo.Context) error {
	id := c.Param("id")
	return a.EmailShow(c, id)
}
func (a *Application) EmailUpdateHandler(c echo.Context) error {
	id := c.Param("id")
	subject := &Email{}
	if err := c.Bind(subject); err != nil {
		return err
	}
	return a.EmailUpdate(c, id, subject)
}
func (a *Application) EmailSettingsHandler(c echo.Context) error {
	id := c.Param("id")
	setting := &Setting{}
	if err := c.Bind(setting); err != nil {
		return err
	}
	return a.EmailSettings(c, id, setting)
}
func (a *Application) EmailDeleteHandler(c echo.Context) error {
	id := c.Param("id")
	return a.EmailDelete(c, id)
}

// Hooks (/hooks)
func (a *Application) HooksZapierHandler(c echo.Context) error {
	payload := &ZapierRequest{}
	if err := c.Bind(payload); err != nil {
		return err
	}
	return a.HooksZapier(c, payload)
}
