// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
	"github.com/kamva/mgm/v3"
)

func init() {
	initializers = append(initializers, setupDb)
	healthchecks["db"] = checkDb
}

func setupDb(app *Application) error {
	db, err := NewConnector(app)
	if err != nil {
		return err
	}

	app.DB = db
	return nil
}

func checkDb(app *Application) (err error) {
	// TODO: Check DB connection
	return nil
}

type Connector struct {
	Log   *zap.SugaredLogger
	Email *grimoire.Store[*Email]
}

func connection[T mgm.Model](name string) (*grimoire.Store[T], error) {
	s, err := app.Config.ConnectionFor(name)
	if err != nil {
		return nil, err
	}
	c, err := grimoire.New[T](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}
	return c, nil
}

func NewConnector(app *Application) (*Connector, error) {
	email, err := connection[*Email]("email")
	if err != nil {
		return nil, err
	}

	grimoire.Indexes[*Email](email, &Email{})

	c := &Connector{
		Log:   app.Log.Named("db"),
		Email: email,
	}

	return c, nil
}

type Email struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	ThreadID  string `bson:"thread_id" json:"thread_id"`
	Subject   string `bson:"subject" json:"subject"`
	Body      string `bson:"body" json:"body"`
	BodyHTML  string `bson:"body_html" json:"body_html"`
	Date      string `bson:"date" json:"date"`
	FromName  string `bson:"from_name" json:"from_name"`
	FromEmail string `bson:"from_email" json:"from_email"`
	ReplyTo   string `bson:"reply_to" json:"reply_to"`
	ReplyName string `bson:"reply_name" json:"reply_name"`
}

type ZapierRequest struct { // struct
	Payload *Email `bson:"payload" json:"payload"`
}
